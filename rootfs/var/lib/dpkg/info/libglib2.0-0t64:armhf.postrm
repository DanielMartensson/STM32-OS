#! /bin/sh
set -e



case "$1" in
    (purge)
        # Don't remove giomodule.cache if libglib2.0-0t64 has been replaced
        # by some other ABI variant of essentially the same library
        # (for example libglib2.0-0xyz), if that ever happens, to
        # avoid causing an equivalent of <https://bugs.debian.org/1065022>.
        #
        # This implementation is based on the assumption that any GLib
        # version that still uses ${libdir}/gio/modules/giomodule.cache
        # will also continue to ship ${libdir}/glib-2.0.
        if [ -d /usr/lib/arm-linux-gnueabihf/gio/modules ] && ! [ -d "/usr/lib/arm-linux-gnueabihf/glib-2.0" ]; then
            rm -f /usr/lib/arm-linux-gnueabihf/gio/modules/giomodule.cache
            rmdir -p --ignore-fail-on-non-empty /usr/lib/arm-linux-gnueabihf/gio/modules
        fi
        ;;
esac

# Similarly, instead of using $DPKG_MAINTSCRIPT_PACKAGE_REFCOUNT, only
# remove gschemas.compiled if GLib has completely gone away - not just
# libglib2.0-0 and libglib2.0-0t64, but any possible future ABI variant
# like libglib2.0-0xyz.
#
# This implementation is based on the assumption that any GLib
# version that still uses ${datadir}/glib-2.0/schemas
# will also continue to ship ${libdir}/glib-2.0.
if [ "$1" = purge ] && [ -d /usr/share/glib-2.0/schemas ] && [ "$(echo /usr/lib/*/glib-2.0)" = "/usr/lib/*/glib-2.0" ]; then
    rm -f /usr/share/glib-2.0/schemas/gschemas.compiled
    rmdir -p --ignore-fail-on-non-empty /usr/share/glib-2.0/schemas
fi
